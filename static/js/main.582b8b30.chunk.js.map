{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","initGame","setState","winner","gameOver","startBoard","r","push","Array","fill","board","game","col","toConsumableArray","state","newBoard","addLast","lastIndexOf","togglePlayer","checkHorizontally","checkVertically","checkDiagonalLeft","checkDiagonalRight","checkDraw","changePlayer","declareWinner","player1","player2","renderBoard","tr","id","react_default","a","createElement","key","map","td","tdId","className","disabled","onClick","handleInputPlayer1","e","target","value","handleInputPlayer2","message","row","c","Fragment","maxLength","minLength","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.582b8b30.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      board: [],\r\n      togglePlayer: 1,\r\n      player1: 'Player 1',\r\n      player2: 'Player 2',\r\n      winner: '',\r\n      gameOver: false,\r\n      message: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.initGame();\r\n  }\r\n\r\n  initGame = () => { \r\n    this.setState({ winner: '', gameOver: false })\r\n    let startBoard = [];\r\n    for (let r = 0; r < 7; r++) {\r\n      startBoard.push(new Array(6).fill(0))\r\n      }\r\n    this.setState({ board: startBoard })\r\n  }\r\n\r\n  game = (col) => {\r\n    const board = [...this.state.board]\r\n    let newBoard = board[col]\r\n    let addLast = newBoard.lastIndexOf(0);\r\n    if (addLast === -1) {\r\n      return;\r\n    }\r\n    newBoard[addLast] = this.state.togglePlayer;\r\n    this.checkHorizontally(board); \r\n    this.checkVertically(board);\r\n    this.checkDiagonalLeft(board);\r\n    this.checkDiagonalRight(board);\r\n    this.checkDraw(board);\r\n    this.changePlayer(); \r\n  }\r\n\r\n  declareWinner = () => {\r\n    if (this.state.togglePlayer === 1) {\r\n      this.setState({ winner: 'Congratulation! the winner is ' + this.state.player1 })\r\n    } else if (this.state.togglePlayer === 2) {\r\n      this.setState({ winner: 'Congratulation! the winner is ' + this.state.player2 }) \r\n    }\r\n  }\r\n\r\n  changePlayer = () => {\r\n    this.setState({togglePlayer: this.state.togglePlayer === 2 ? 1 : 2})\r\n  }\r\n\r\n  renderBoard = (tr, id) => {\r\n    return ( \r\n      <tr key={ id }>\r\n        {tr.map((td, tdId) => <td key={ tdId } className=\"box\">\r\n        <div disabled={ this.state.gameOver } className={ \"circle player\"+td } onClick={() => this.game(id)}></div></td>)}\r\n      </tr>\r\n    )\r\n  }\r\n\r\n  handleInputPlayer1 = (e) => {\r\n    this.setState({ player1: e.target.value })\r\n  }\r\n\r\n  handleInputPlayer2 = (e) => {\r\n    this.setState({ player2: e.target.value })\r\n  }\r\n\r\n  checkVertically(board) {\r\n    for (let row = 0; row < 7; row++) {\r\n      for (let col = 0; col < 5; col++) {\r\n        if (board[row][col]) {\r\n          if (board[row][col] === board[row][col + 1] && \r\n              board[row][col] === board[row][col + 2] &&\r\n              board[row][col] === board[row][col + 3]) {\r\n              this.declareWinner();\r\n              this.setState({ gameOver: true });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  checkHorizontally(board) {\r\n    for (let row = 3; row < 7; row++) {\r\n      for (let col = 0; col < 7; col++) {\r\n        if (board[row][col]) {\r\n          if (board[row][col] === board[row - 1][col] &&\r\n              board[row][col] === board[row - 2][col] &&\r\n              board[row][col] === board[row - 3][col]) {\r\n              this.declareWinner();\r\n              this.setState({ gameOver: true })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  checkDiagonalLeft(board) {\r\n    for (let row = 3; row < 7; row++) {\r\n      for (let c = 0; c < 6; c++) {\r\n        if (board[row][c]) {\r\n          if (board[row][c] === board[row - 1][c + 1] &&\r\n              board[row][c] === board[row - 2][c + 2] &&\r\n              board[row][c] === board[row - 3][c + 3]) {\r\n              this.declareWinner();\r\n              this.setState({ gameOver: true })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  checkDiagonalRight(board) {\r\n    for (let row = 3; row < 7; row++) {\r\n      for (let col = 3; col < 7; col++) {\r\n        if (board[row][col]) {\r\n          if (board[row][col] === board[row - 1][col - 1] &&\r\n              board[row][col] === board[row - 2][col - 2] &&\r\n              board[row][col] === board[row - 3][col - 3]) {\r\n              this.declareWinner();\r\n              this.setState({ gameOver: true })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  checkDraw(board) {\r\n    for (let row = 0; row < 7; row++) {\r\n      for (let col = 0; col < 6; col++) {\r\n        if (board[row][col] === 0) {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ winner: 'Sorry, no winner. Its a draw', gameOver: true }) \r\n  }\r\n\r\n  render() {\r\n    let board = this.state.board;\r\n    return (\r\n      <>\r\n      <div className=\"logo\">Connect 4</div>\r\n        <header>\r\n          <span className=\"header-left\"><input className=\"input_player1\" maxLength=\"30\" minLength=\"1\" onChange={ this.handleInputPlayer1 } value={ this.state.player1 }></input></span>\r\n          <span className=\"header-right\"><input className=\"input_player2\" maxLength=\"30\" minLength=\"1\" onChange={ this.handleInputPlayer2 } value={ this.state.player2 }></input></span>\r\n        </header>\r\n        <div className=\"information\"><button className=\"header-button\" onClick={ this.initGame }>Start over</button><div className=\"winner\">{ this.state.winner } {this.state.message } </div></div>\r\n        <div className=\"board-wrapper\">\r\n          <table>\r\n            <tbody>\r\n              { board.map(this.renderBoard) }\r\n          </tbody>\r\n          </table>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\nboard: [\r\n        1, 2, 3, 4, 5, 6, 7,\r\n        8, 9, 10,11,12,13,14,\r\n        15,16,17,18,19,20,21,\r\n        22,23,24,25,26,27,28,\r\n        29,30,31,32,33,34,35,\r\n        36,37,38,39,40,41,42\r\n      ],\r\n\r\n*/\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}